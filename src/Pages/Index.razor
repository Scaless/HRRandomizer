@page "/"

<PageTitle>MCC Randomizer</PageTitle>

@using HRRandomizer.Data
@using System.IO
@using System.Text
@using Newtonsoft.Json
@*@inject WeatherForecastService ForecastService*@
@inject IJSRuntime JS

<h1>MCC Playlist Randomizer</h1>

<div class="row">
    <div class="col-lg-4">
        <div>
            <div class="input-group">
                <div class="input-group-prepend">
                    <span class="input-group-text" data-bs-toggle="tooltip" data-bs-placement="top" title="Change the Seed to shake up the randomizer!">RNG Seed</span>
                </div>
                <button class="btn btn-outline-danger" @onclick=RerollSeed>🎲</button>
                <input @oninput="UpdateSeed" class="form-control" value="@config.Seed" />
            </div>

            <div class="input-group">
                <div class="input-group-text">
                    <input class="form-check-input mt-0" type="checkbox" @onchange="UpdateHidePlaylist" checked=@config.HidePlaylist>
                </div>
                <label class="input-group-text" data-bs-toggle="tooltip" data-bs-placement="top"
                       title="">
                    Hide Playlist Details
                </label>
            </div>

            <div class="input-group">
                <div class="input-group-text">
                    <input class="form-check-input mt-0" type="checkbox" @onchange="UpdateShuffle" checked=@config.IsShuffleEnabled>
                </div>
                <label class="input-group-text" data-bs-toggle="tooltip" data-bs-placement="top"
                       title="Randomize the order of levels in the playlist. You probably want this enabled.">Shuffle</label>
            </div>

            <div class="input-group">
                <div class="input-group-text">
                    <input class="form-check-input mt-0" type="checkbox" @onchange="UpdateDuplicates" checked=@config.AllowDuplicates>
                </div>
                <label class="input-group-text" data-bs-toggle="tooltip" data-bs-placement="top"
                       title="Allows missions to show up in the playlist more than once, potentially back-to-back.">Allow Duplicate Missions</label>
            </div>

            <div class="input-group">
                <label class="input-group-text" for="difficulty" data-bs-toggle="tooltip" data-bs-placement="top"
                       title="Choosing a specific difficulty will set it for all levels. The Random option will randomly assign a difficulty from Easy/Normal/Heroic/Legendary for each level.">Difficulty</label>
                <select class="form-select" id="difficulty" @onchange="UpdateDifficulty">
                    @foreach (var difficulty in Enum.GetValues<GameDifficulty>())
                    {
                        <option value=@difficulty.ToString()>@difficulty.ToString()</option>
                    }
                </select>
            </div>

            <div class="input-group">
                <div class="input-group-prepend">
                    <span class="input-group-text" data-bs-toggle="tooltip" data-bs-placement="top"
                          title="Limit the playlist to a maximum number of missions. Hard limit of 99.">Playlist Length Limit</span>
                </div>
                <input @oninput="UpdateCountLimit" type="number" class="form-control" min=1 max=99 value="@config.CountLimit" />
            </div>

            <div class="input-group mb-0">
                <div class="input-group-prepend">
                    <span class="input-group-text" data-bs-toggle="tooltip" data-bs-placement="top"
                          title="Limit the playlist to a maximum length based on each level's World Record time.">Time Limit (minutes)</span>
                </div>
                <input @oninput="UpdateTimeLimit" type="number" class="form-control" min=0 value="@config.TimeLimitMinutes" />
            </div>

            <div class="input-group mb-0">
                <div class="input-group-prepend">
                    <span class="input-group-text" data-bs-toggle="tooltip" data-bs-placement="top"
                          title="Multiplier to use when estimating how long a level should take. Default is 1.25 * World Record time. For example, a level with a 10 minute World Record would be expected to take 12 Min 30 Sec. Set this higher if you're a bad at the game :)">
                        Skill Multiplier
                    </span>
                </div>
                <input @oninput="UpdateFudgeFactor" class="form-control" min=0 value="@config.FudgeFactor" />
            </div>
        </div>
    </div>

    <div class="col-lg-8">
        <div style="height:400px;" class="overflow-auto" id="Halo1">
            <ul class="list-group">
                @{
                    var UniqueGames = Enum.GetValues<Game>();
                }
                @foreach (var game in Halo.AllMissions.Select(x => x.Game).Distinct().ToList())
                {
                    int GameMissionCount = config.SelectedMissions.Where(x => x.Mission.Game == game).Count();
                    int GameMissionsSelected = config.SelectedMissions.Where(x => x.Mission.Game == game).Count(x => x.Enabled == true);
                    bool GameChecked = GameMissionCount == GameMissionsSelected;

                    List<SelectedMission> GameMissions = config.SelectedMissions.Where(x => x.Mission.Game == game).ToList();
                    int MissionCountHalf = GameMissions.Count() / 2;

                    List<SelectedMission> SelectedMissionsFirst = new List<SelectedMission>();
                    List<SelectedMission> SelectedMissionsSecond = new List<SelectedMission>();

                    int i = 0;
                    foreach (var mission in GameMissions)
                    {
                        if (i < MissionCountHalf)
                            SelectedMissionsFirst.Add(mission);
                        else
                            SelectedMissionsSecond.Add(mission);

                        i++;
                    }

                    <li class="list-group-item p-3">
                        <input class="form-check-input me-1" type="checkbox" @onchange="(e) => UpdateSelectedGame(game, e)" checked=@GameChecked id=@game.ToString().ToLower()>
                        <span>@game.ToString()</span>

                        <div class="row">
                            <div class="col-sm-6">
                                <ul>
                                    @foreach (var mission in SelectedMissionsFirst.Where(x => x.Mission.Game == game))
                                    {
                                        <li class="list-group-item p-sm-0 border-0">
                                            <input class="form-check-input me-1" @onchange="(e) => UpdateSelectedMission(mission.Mission.MapName, mission.Mission.InsertionPoint, e)" checked=@mission.Enabled type="checkbox" value="@mission.Mission.MapName">
                                            @mission.Mission.FriendlyName
                                        </li>
                                    }
                                </ul>
                            </div>
                            <div class="col-sm-6">
                                <ul>
                                    @foreach (var mission in SelectedMissionsSecond.Where(x => x.Mission.Game == game))
                                    {
                                        <li class="list-group-item p-sm-0 border-0">
                                            <input class="form-check-input me-1" @onchange="(e) => UpdateSelectedMission(mission.Mission.MapName, mission.Mission.InsertionPoint, e)" checked=@mission.Enabled type="checkbox" value="@mission.Mission.MapName">
                                            @mission.Mission.FriendlyName
                                        </li>
                                    }
                                </ul>
                            </div>
                        </div>

                    </li>
                }
            </ul>
        </div>
    </div>
</div>

<hr />

<div class="row container">
    <div class="col-lg-12">
        <div class="input-group">
            <span class="input-group-text">Share Code</span>
            <input type="text" @oninput="UpdateShareCode" onfocus="this.select();" class="form-control" value="@config.ShareCode">
        </div>
    </div>
</div>

<hr />

<div class="row container">
    <div class="col-lg-12">
        @{
            string GamesRequired = "";
            if(config.GamesRequired != null)
            {
                GamesRequired = string.Join(", ", config.GamesRequired.ToList().OrderBy(x => x));
            }
        }
        <h3>Installed Games Required: @GamesRequired</h3>
    </div>
</div>

<hr />


<div class="row container">
    <div class="col-lg-12">
        @{
            string RealMissionCountStr = config.HidePlaylist ? "??" : config.Missions.Where(x => !x.Mission.IsCutscene).Count().ToString();
            int CutsceneMissionCount = config.HidePlaylist ? 0 : config.Missions.Where(x => x.Mission.IsCutscene).Count();
            string AdditionalCutsceneStr = "";
            if(CutsceneMissionCount > 0)
            {
                AdditionalCutsceneStr = $"(+{CutsceneMissionCount} Cutscenes)";
            }
        }
        <h3>@RealMissionCountStr Missions in Playlist @AdditionalCutsceneStr</h3>
        <h3>Estimated Run Time: @config.RunningTime.ToString()</h3>
        <button hidden=@config.HidePlaylist @onclick="ToggleHideMissions">@(GetHideMissionsText())</button>
    </div>
</div>

<hr />

<div class="row container" hidden="@(hideMissions < 3)">
    <table border=1 class="table table-bordered">
        <thead>
            <tr>
                <th>Game</th>
                <th>Mission</th>
                <th>Difficulty</th>
                <th>Est. Time</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var mission in config.Missions)
            {
                <tr>
                    <td>@mission.Mission.Game.ToString()</td>
                    <td>@mission.Mission.FriendlyName.ToString()</td>
                    <td>@mission.Difficulty.ToString()</td>
                    <td>@GetMissionLengthString(mission)</td>
                </tr>
            }
        </tbody>
    </table>
</div>

<hr />

<div class="row container">
    <div class="col-lg-12">
        <h3>How to Run the Playlist</h3>
        <p>Find your MCC careerdb folder. For Steam this is usually at: </p>
        <p><b>C:\Program Files (x86)\Steam\steamapps\common\Halo The Master Chief Collection\data\careerdb\missionplaylistdb.xml</b></p>
        <p>Make a backup of your missionplaylistdb.xml file.</p>
        <p>Download the randomizer playlist file and place it in the careerdb folder.</p>
        <button @onclick="DownloadMissionXMLFromStream">Download Playlist File</button>
    </div>
</div>

<hr />

<div class="row container">
    <h1>Q&A</h1>

    <h3>Why does my playlist have cutscenes from other games in it?</h3>
    <p>
        MCC does not handle playing the same mission back-to-back or switching difficulty mid-run very well.
        To avoid crashing the game, the randomizer inserts a cutscene from a different game in order to reset the game state.
        The cutscenes that play will be preferred based on the games that are in the playlist.
    </p>
    <p>
        If multiple games are in the possible mission selections, we will try to insert cutscenes from those games.
        If this is not possible, ODST will prefer Reach cutscenes, and all other games will prefer ODST cutscenes.
    </p>
</div>

<hr />

@code {
    private RandomizerConfig config = new RandomizerConfig();

    private int hideMissions = 0;
    private void ToggleHideMissions()
    {
        hideMissions++;

        if (hideMissions > 3)
        {
            hideMissions = 0;
        }
    }

    private MarkupString GetHideMissionsText()
    {
        switch (hideMissions)
        {
            case 0: return new MarkupString("Show Mission List");
            case 1: return new MarkupString("Are you sure?");
            case 2: return new MarkupString("Are you <i>really</i> sure?");
            case 3:
            default: return new MarkupString("Hide Mission List");
        }
    }

    private MarkupString GetMissionLengthString(GeneratedMission gm)
    {
        TimeSpan v = gm.Mission.IsCutscene ? gm.Mission.WRTime : (gm.Mission.WRTime * (config.FudgeFactor ?? 1.25));
        return new MarkupString($"{v.Minutes} Min {v.Seconds} Sec");
    }

    protected override void OnInitialized()
    {
        foreach (var mission in Halo.AllMissions)
        {
            if (mission.IsCutscene)
                continue;
            config.SelectedMissions.Add(new SelectedMission() { Mission = mission, Enabled = !mission.IsCutscene, MapName = mission.MapName });
        }

        config.Reshuffle();
    }

    void UpdateDifficulty(ChangeEventArgs e)
    {
        config.Difficulty = Enum.Parse<GameDifficulty>(e?.Value?.ToString() ?? "Easy");
        config.Reshuffle();
    }

    void UpdateSeed(ChangeEventArgs e)
    {
        config.Seed = e.Value as string ?? "";
        config.Reshuffle();
    }

    void UpdateShareCode(ChangeEventArgs e)
    {
        config.FromShareCode(e.Value as string ?? "");
        config.Reshuffle();
    }

    void UpdateShuffle(ChangeEventArgs e)
    {
        config.IsShuffleEnabled = e.Value as bool? ?? false;
        config.Reshuffle();
    }

    void UpdateDuplicates(ChangeEventArgs e)
    {
        config.AllowDuplicates = e.Value as bool? ?? false;
        config.Reshuffle();
    }

    void UpdateSelectedGame(Game game, ChangeEventArgs e)
    {
        bool? bNew = e.Value as bool?;
        if (bNew.HasValue)
        {
            foreach (var mission in config.SelectedMissions)
            {
                if (mission.Mission.Game == game)
                {
                    mission.Enabled = bNew.Value;
                }
            }
        }

        config.Reshuffle();
    }

    void UpdateSelectedMission(string missionName, int insertionPoint, ChangeEventArgs e)
    {
        bool? bNew = e.Value as bool?;
        if (bNew.HasValue)
        {
            var mission = config.SelectedMissions.FirstOrDefault(x => x.Mission.MapName == missionName && x.Mission.InsertionPoint == insertionPoint);
            if (mission != null)
            {
                mission.Enabled = bNew.Value;

                int GameMissionCount = config.SelectedMissions.Where(x => x.Mission.Game == mission.Mission.Game).Count();
                int GameMissionsSelected = config.SelectedMissions.Where(x => x.Mission.Game == mission.Mission.Game).Count(x => x.Enabled == true);
                bool GameChecked = GameMissionCount == GameMissionsSelected;

                if (GameMissionsSelected > 0 && GameMissionCount != GameMissionsSelected)
                {
                    JS.InvokeVoidAsync("setCheckboxIndeterminate", mission.Mission.Game.ToString().ToLower(), true);
                }
                else
                {
                    JS.InvokeVoidAsync("setCheckboxIndeterminate", mission.Mission.Game.ToString().ToLower(), false);
                }
            }
        }

        config.Reshuffle();
    }

    void UpdateHidePlaylist(ChangeEventArgs e)
    {
        config.HidePlaylist = e.Value as bool? ?? false;
        if (config.HidePlaylist)
        {
            hideMissions = 0;
        }
        config.Reshuffle();
    }

    void UpdateCountLimit(ChangeEventArgs e)
    {
        string? count = e.Value as string;
        config.CountLimit = null;
        if (count != null)
        {
            if (int.TryParse(count, out int newLimit))
            {
                if (newLimit >= 0)
                {
                    config.CountLimit = newLimit;
                }
            }
        }
        config.Reshuffle();
    }

    void UpdateTimeLimit(ChangeEventArgs e)
    {
        string? count = e.Value as string;
        config.TimeLimitMinutes = null;
        if (count != null)
        {
            if (int.TryParse(count, out int newLimit))
            {
                if (newLimit >= 0)
                {
                    config.TimeLimitMinutes = newLimit;
                }
            }
        }
        config.Reshuffle();
    }

    void UpdateFudgeFactor(ChangeEventArgs e)
    {
        string? count = e.Value as string;
        config.FudgeFactor = null;
        if (count != null)
        {
            if (float.TryParse(count, out float newLimit))
            {
                if (newLimit >= 0)
                {
                    config.FudgeFactor = newLimit;
                }
            }
        }
        config.Reshuffle();
    }

    void RerollSeed()
    {
        config.Seed = RandomizerWords.RandomWord();
        config.Reshuffle();
    }

    private async Task DownloadMissionXMLFromStream()
    {
        var fileStream = GenerateXMLStream();
        var fileName = "missionplaylistdb.xml";

        using var streamRef = new DotNetStreamReference(stream: fileStream);

        await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
    }

    public static Stream StreamFromString(string s)
    {
        var stream = new MemoryStream();
        var writer = new StreamWriter(stream);
        writer.Write(s);
        writer.Flush();
        stream.Position = 0;
        return stream;
    }

    private Stream GenerateXMLStream()
    {
        StringBuilder XML = new StringBuilder();
        XML.AppendLine(@"<?xml version=""1.0"" encoding=""utf-8""?>
<!--Please increment version number inside the MissionPlaylists tag if the list is updated.  The game uses version number to ensure coop players have same data and also save games will be based on this (The version inside XML tag is not used.)-->
<MissionPlaylists version=""4"">
	<Halo1 />
	<Halo2 />
	<Halo3 />
	<Halo3ODST />
	<HaloReach />
	<Halo4 />
	<CrossTitle>");

        XML.AppendLine($@"		<Playlist id=""{config.Seed}"" name=""Randomizer Playlist"" desc=""{config.ToShareCode()}"" image=""CT_Setlist_Preview_01"" highestDiffID=""_campaign_difficulty_level_easy"" hasRallyPoints=""false"">");
        XML.AppendLine($@"			<MapList>");
        foreach (GeneratedMission mission in config.Missions)
        {
            string InsertionPoint = mission.Mission.InsertionPoint > 0 ? @$"insertionpoint=""{mission.Mission.InsertionPoint}""" : "";
            XML.AppendLine($@"				<Map id=""{mission.Mission.MapName}"" diffID=""{Halo.DifficultyToXML(mission.Difficulty)}"" {InsertionPoint} />");
        }

        XML.Append(@"			</MapList>
		</Playlist>
	</CrossTitle>
	<Extras>
		<!-- Status: 0 = greyed out, 1 = visible, 2 = hidden, 3 = invalid -->
		<Halo5Beta status=""0"" />
	</Extras>
</MissionPlaylists>");

        var fileStream = StreamFromString(XML.ToString());

        return fileStream;
    }

}
